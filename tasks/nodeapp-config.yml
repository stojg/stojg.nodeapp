---

- name: "Add {{ app_name }} user"
  user:
    name: "{{ app_name }}"
    state: present
    shell: /bin/bash
    generate_ssh_key: yes
    ssh_key_type: ecdsa
    ssh_key_bits: 521

- name: "Add circleci to {{ app_name }} authorized_keys"
  authorized_key:
    key: "{{ lookup('file', 'ssh_keys/circleci.pub') }}"
    user: "{{ app_name }}"
    state: present

- name: install deploy script
  template:
    src: deploy.sh.j2
    dest: "/home/{{ app_name }}/deploy.sh"
    mode: 0755
    owner: "{{ app_name }}"
    group: "{{ app_name }}"

- name: "install {{ app_name }}.service unit"
  template:
    dest: "/lib/systemd/system/{{ app_name }}.service"
    src: app.service.j2
  notify: reload systemd daemon

- name: "ensure {{ app_name }} user can manage service file"
  template:
    src: sudoers.j2
    dest: "/etc/sudoers.d/{{app_name}}"
    validate: 'visudo -cf %s'
    mode: 0440

- include_tasks: nodeapp-install-fake-certs.yml
  when:
    - certbot_create_method != 'standalone'

- name: configure nginx app config
  template:
    src: "etc/nginx/snippets/app_name.conf.j2"
    dest: "/etc/nginx/snippets/{{ app_name }}.conf"
  notify:
    - Test nginx and reload

- name: configure default nginx site
  template:
    src: "etc/nginx/sites-available/default.j2"
    dest: "/etc/nginx/sites-available/default"
  notify:
    - Test nginx and reload

- name: Ensure default nginx site is enabled
  file:
    src: "/etc/nginx/sites-available/default"
    dest: "/etc/nginx/sites-enabled/default"
    state: link

- name: Create SSL configuration for nginx
  template:
    dest: /etc/nginx/tls.conf
    src: etc/nginx/tls.conf.j2
  notify: Test nginx and restart

- name: Configure nginx.conf
  template:
    src: etc/nginx/nginx.conf.j2
    dest: /etc/nginx/nginx.conf
  notify:
    - Test nginx and reload

- name: Create nginx cache directory
  file:
    path: '/var/www/cache'
    state: directory
    mode: 0755
    owner: www-data
    group: www-data
  notify: Test nginx and restart
